{
  "title": "Services",
  "subtitle": "Manage database connections and API services",
  "types": {
    "database": "Database",
    "email": "Email",
    "file": "File",
    "script": "Script",
    "remote": "Remote Web Service",
    "oauth": "OAuth",
    "notification": "Notification"
  },
  "database": {
    "title": "Database Services",
    "labels": {
      "name": "Service Name",
      "type": "Service Type",
      "label": "Label",
      "description": "Description",
      "host": "Host",
      "port": "Port",
      "database": "Database",
      "username": "Username",
      "password": "Password",
      "dsn": "DSN",
      "options": "Advanced Options",
      "charset": "Character Set",
      "collation": "Collation",
      "timezone": "Timezone",
      "connection": "Connection",
      "pooling": "Connection Pooling"
    },
    "placeholders": {
      "serviceName": "Enter service name (alphanumeric, underscore, hyphen)",
      "serviceDescription": "Write a brief description of the API (optional)",
      "hostAddress": "Database server hostname or IP address",
      "portNumber": "Database server port number",
      "databaseName": "Database name to connect to",
      "dsnString": "Complete DSN connection string"
    },
    "validation": {
      "required": "This field is required",
      "email": "Please enter a valid email address",
      "minLength": "Minimum length is {{length}} characters",
      "maxLength": "Maximum length is {{length}} characters",
      "pattern": "Please enter a valid format",
      "numeric": "Please enter a valid number",
      "url": "Please enter a valid URL",
      "custom": "Validation failed",
      "connectionTest": "Connection test failed",
      "hostRequired": "Host address is required",
      "portInvalid": "Port must be a number between 1 and 65535",
      "databaseRequired": "Database name is required"
    },
    "connection": {
      "testing": "Testing connection...",
      "success": "Connection successful",
      "failed": "Connection failed",
      "timeout": "Connection timeout"
    },
    "actions": {
      "testConnection": "Test Connection",
      "generateSchema": "Generate Schema",
      "refreshSchema": "Refresh Schema",
      "manageAccess": "Manage Access"
    }
  },
  "messages": {
    "create": {
      "success": "Service successfully created",
      "error": "Failed to create service",
      "pending": "Creating service..."
    },
    "update": {
      "success": "Service successfully updated", 
      "error": "Failed to update service",
      "pending": "Updating service..."
    },
    "delete": {
      "success": "Service successfully deleted",
      "error": "Failed to delete service",
      "pending": "Deleting service...",
      "confirm": "Are you sure you want to delete this service?"
    },
    "fetch": {
      "error": "Failed to load services",
      "pending": "Loading services...",
      "empty": "No services found"
    }
  },
  "dialogs": {
    "delete": {
      "title": "Delete Service",
      "message": "Are you sure you want to delete this service? This action cannot be undone.",
      "warning": "Deleting this service will also remove all associated API endpoints and configurations."
    }
  },
  "controls": {
    "serviceType": {
      "label": "Service Type",
      "tooltip": "Select the type of service you're adding."
    },
    "namespace": {
      "label": "Namespace", 
      "tooltip": "Select a namespace used for the API's URI structure, such as /api/v2/{type}/{namespace}. It should be lowercase and alphanumeric."
    },
    "label": {
      "label": "Label",
      "tooltip": "The display name or label for the service."
    },
    "description": {
      "label": "Description",
      "tooltip": "Write a brief description of the API (optional)."
    },
    "createAndTest": "Create & Test",
    "securityConfig": "Security Config"
  },
  "details": "Details",
  "definition": "Service Definition", 
  "config": "Configuration",
  "options": "Advanced Options",
  "deleteSuccessMsg": "Service successfully deleted",
  "createSuccessMsg": "Service successfully created",
  "updateSuccessMsg": "Service successfully updated"
}